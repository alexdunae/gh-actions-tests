name: Customizable
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  configure_matrix:
    name: Configure CI matrix
    runs-on: ubuntu-latest
    env:
      all_clients: '["stolo", "main"]'
    outputs:
      branch: ${{ steps.get_branch.outputs.branch }}
      commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          # required for pull_requests so we can do HEAD^2 to get the commit message
          fetch-depth: 2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: "Custom action"
        uses: ./.github/actions/matrix

      - name: Get commit message
        id: get_commit_message
        run: |
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo ::set-output name=commit_message::$(git log --format=%B -n 1 HEAD)
          elif [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            echo ::set-output name=commit_message::$(git log --format=%B -n 1 HEAD^2)
          fi

      - name: Get branch
        id: get_branch
        run: |
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | tr / -)"
          elif [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            echo "::set-output name=branch::$(echo ${GITHUB_HEAD_REF} | tr / -)"
          fi

      - name: Did we?
        run: |

      - run: echo $GITHUB_CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - id: set-matrix
        name: Set CI matrix
        shell: bash
        run: |
          echo "commit_message: ${{steps.get_commit_message.outputs.commit_message}}"
          echo "branch: ${{steps.get_branch.outputs.branch}}"

          requested_all_clients=${{ contains(steps.get_commit_message.outputs.commit_message, 'ci full') }}
          on_main_branch=${{ steps.get_branch.outputs.branch == 'main' || steps.get_branch.outputs.branch == 'master' }}

          if [ "$on_main_branch" = "true" || "$requested_all_clients" = "true" ]; then
              if [ "$requested_all_clients" = "true" ]; then
                echo "::notice::Commit message included 'ci full' so setting CI matrix to include all clients"
              elif [ "$on_main_branch" = "true" ]; then
                echo "::notice::Running on master branch so setting CI matrix to include all clients"
              fi;
              echo "::set-output name=matrix::[\"main\",\"demo\"]"
          else
              echo "::warning::On a branch so only running tests for the 'main' client - create a commit message with \"ci full\" to run CI on all clients"
              echo "::set-output name=matrix::[\"main\"]"
          fi

  test:
    needs: configure_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        client: ${{fromJson(needs.configure_matrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - run: echo "Output ${{ needs.configure_matrix.outputs.matrix }}"
      - run: echo "Output ${{ fromJson(needs.configure_matrix.outputs.matrix) }}"
      - name: Last step failed
        run: echo
        if: ${{ failure() }}
      - run: echo "üßñ‚Äç‚ôÄÔ∏è The job is running for client ${{ matrix.client }}."
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
